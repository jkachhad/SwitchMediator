//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by SwitchMediator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using System.Runtime.CompilerServices;
using System.Diagnostics;

namespace Mediator.Switch;

#pragma warning disable CS1998

public class SwitchMediator : IMediator
{
    private readonly Test.Notifications.SimpleRequestHandler _test_Notifications_SimpleRequestHandler;
    private readonly IEnumerable<INotificationHandler<Test.Notifications.OrderCreatedEvent>> _test_Notifications_OrderCreatedEvent__Handlers;

    public SwitchMediator(
        Test.Notifications.SimpleRequestHandler test_Notifications_SimpleRequestHandler,
        IEnumerable<INotificationHandler<Test.Notifications.OrderCreatedEvent>> test_Notifications_OrderCreatedEvent__Handlers)
    {
        _test_Notifications_SimpleRequestHandler = test_Notifications_SimpleRequestHandler;
        _test_Notifications_OrderCreatedEvent__Handlers = test_Notifications_OrderCreatedEvent__Handlers;
    }

    public async Task<TResponse> Send<TResponse>(IRequest<TResponse> request)
    {
        switch (request)
        {
            case Test.Notifications.SimpleRequest test_Notifications_SimpleRequest:
                return ToResponse<TResponse>(
                    await HandleSimpleRequestWithBehaviors(test_Notifications_SimpleRequest));
            default:
                throw new ArgumentException($"No handler for {request.GetType().Name}");
        }
    }

    public async Task Publish(INotification notification)
    {
        switch (notification)
        {
            case Test.Notifications.OrderCreatedEvent test_Notifications_OrderCreatedEvent:
            {
                foreach (var handler in _test_Notifications_OrderCreatedEvent__Handlers)
                {
                    await handler.Handle(test_Notifications_OrderCreatedEvent);
                }
                break;
            }
            default:
                throw new ArgumentException($"No handlers for {notification.GetType().Name}");
        }
    }

    private async Task<bool> HandleSimpleRequestWithBehaviors(Test.Notifications.SimpleRequest request)
    {
        return await _test_Notifications_SimpleRequestHandler.Handle(request);
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    [DebuggerStepThrough]
    private T ToResponse<T>(object result)
    {
        return (T) result;
    }
}