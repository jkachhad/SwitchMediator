//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by SwitchMediator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Threading;
using System.Threading.Tasks;

namespace Mediator.Switch;

#pragma warning disable CS1998

public class SwitchMediator : IMediator
{
    private readonly Lazy<Tests.MultipleRequests.GetProductRequestHandler> _tests_MultipleRequests_GetProductRequestHandler;
    private readonly Lazy<Tests.MultipleRequests.GetInventoryRequestHandler> _tests_MultipleRequests_GetInventoryRequestHandler;

    public SwitchMediator(
        Lazy<Tests.MultipleRequests.GetProductRequestHandler> tests_MultipleRequests_GetProductRequestHandler,
        Lazy<Tests.MultipleRequests.GetInventoryRequestHandler> tests_MultipleRequests_GetInventoryRequestHandler)
    {
        _tests_MultipleRequests_GetProductRequestHandler = tests_MultipleRequests_GetProductRequestHandler;
        _tests_MultipleRequests_GetInventoryRequestHandler = tests_MultipleRequests_GetInventoryRequestHandler;
    }

    public Task<TResponse> Send<TResponse>(IRequest<TResponse> request, CancellationToken cancellationToken = default)
    {
        switch (request)
        {
            case Tests.MultipleRequests.GetInventoryRequest tests_MultipleRequests_GetInventoryRequest:
                return ToResponse<Task<TResponse>>(
                    HandleGetInventoryRequestWithBehaviors(tests_MultipleRequests_GetInventoryRequest, cancellationToken));
            case Tests.MultipleRequests.GetProductRequest tests_MultipleRequests_GetProductRequest:
                return ToResponse<Task<TResponse>>(
                    HandleGetProductRequestWithBehaviors(tests_MultipleRequests_GetProductRequest, cancellationToken));
            default:
                throw new ArgumentException($"No handler for {request.GetType().Name}");
        }
    }

    public async Task Publish(INotification notification, CancellationToken cancellationToken = default)
    {
        switch (notification)
        {

            default:
                throw new ArgumentException($"No handlers for {notification.GetType().Name}");
        }
    }

    private Task<string> HandleGetProductRequestWithBehaviors(
        Tests.MultipleRequests.GetProductRequest request,
        CancellationToken cancellationToken)
    {
        return
            /* Request Handler */ _tests_MultipleRequests_GetProductRequestHandler.Value.Handle(request, cancellationToken);
    }

    private Task<int> HandleGetInventoryRequestWithBehaviors(
        Tests.MultipleRequests.GetInventoryRequest request,
        CancellationToken cancellationToken)
    {
        return
            /* Request Handler */ _tests_MultipleRequests_GetInventoryRequestHandler.Value.Handle(request, cancellationToken);
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    [DebuggerStepThrough]
    private T ToResponse<T>(object result)
    {
        return (T) result;
    }
}