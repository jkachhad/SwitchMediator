//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by SwitchMediator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Threading;
using System.Threading.Tasks;

namespace Mediator.Switch;

#pragma warning disable CS1998

public class SwitchMediator : IMediator
{
    private readonly Lazy<Tests.ConstrainedPipeline.SpecialProcessRequestHandler> _tests_ConstrainedPipeline_SpecialProcessRequestHandler;
    private readonly Lazy<Tests.ConstrainedPipeline.NormalRequestHandler> _tests_ConstrainedPipeline_NormalRequestHandler;
    private readonly Tests.ConstrainedPipeline.GenericLoggingBehavior<Tests.ConstrainedPipeline.SpecialProcessRequest, System.Guid> _tests_ConstrainedPipeline_GenericLoggingBehavior__tests_ConstrainedPipeline_SpecialProcessRequest;
    private readonly Tests.ConstrainedPipeline.SpecialProcessingBehavior<Tests.ConstrainedPipeline.SpecialProcessRequest, System.Guid> _tests_ConstrainedPipeline_SpecialProcessingBehavior__tests_ConstrainedPipeline_SpecialProcessRequest;
    private readonly Tests.ConstrainedPipeline.GenericLoggingBehavior<Tests.ConstrainedPipeline.NormalRequest, int> _tests_ConstrainedPipeline_GenericLoggingBehavior__tests_ConstrainedPipeline_NormalRequest;

    public SwitchMediator(
        Lazy<Tests.ConstrainedPipeline.SpecialProcessRequestHandler> tests_ConstrainedPipeline_SpecialProcessRequestHandler,
        Lazy<Tests.ConstrainedPipeline.NormalRequestHandler> tests_ConstrainedPipeline_NormalRequestHandler,
        Tests.ConstrainedPipeline.GenericLoggingBehavior<Tests.ConstrainedPipeline.SpecialProcessRequest, System.Guid> tests_ConstrainedPipeline_GenericLoggingBehavior__tests_ConstrainedPipeline_SpecialProcessRequest,
        Tests.ConstrainedPipeline.SpecialProcessingBehavior<Tests.ConstrainedPipeline.SpecialProcessRequest, System.Guid> tests_ConstrainedPipeline_SpecialProcessingBehavior__tests_ConstrainedPipeline_SpecialProcessRequest,
        Tests.ConstrainedPipeline.GenericLoggingBehavior<Tests.ConstrainedPipeline.NormalRequest, int> tests_ConstrainedPipeline_GenericLoggingBehavior__tests_ConstrainedPipeline_NormalRequest)
    {
        _tests_ConstrainedPipeline_SpecialProcessRequestHandler = tests_ConstrainedPipeline_SpecialProcessRequestHandler;
        _tests_ConstrainedPipeline_NormalRequestHandler = tests_ConstrainedPipeline_NormalRequestHandler;
        _tests_ConstrainedPipeline_GenericLoggingBehavior__tests_ConstrainedPipeline_SpecialProcessRequest = tests_ConstrainedPipeline_GenericLoggingBehavior__tests_ConstrainedPipeline_SpecialProcessRequest;
        _tests_ConstrainedPipeline_SpecialProcessingBehavior__tests_ConstrainedPipeline_SpecialProcessRequest = tests_ConstrainedPipeline_SpecialProcessingBehavior__tests_ConstrainedPipeline_SpecialProcessRequest;
        _tests_ConstrainedPipeline_GenericLoggingBehavior__tests_ConstrainedPipeline_NormalRequest = tests_ConstrainedPipeline_GenericLoggingBehavior__tests_ConstrainedPipeline_NormalRequest;
    }

    public Task<TResponse> Send<TResponse>(IRequest<TResponse> request, CancellationToken cancellationToken = default)
    {
        switch (request)
        {
            case Tests.ConstrainedPipeline.NormalRequest tests_ConstrainedPipeline_NormalRequest:
                return ToResponse<Task<TResponse>>(
                    HandleNormalRequestWithBehaviors(tests_ConstrainedPipeline_NormalRequest, cancellationToken));
            case Tests.ConstrainedPipeline.SpecialProcessRequest tests_ConstrainedPipeline_SpecialProcessRequest:
                return ToResponse<Task<TResponse>>(
                    HandleSpecialProcessRequestWithBehaviors(tests_ConstrainedPipeline_SpecialProcessRequest, cancellationToken));
            default:
                throw new ArgumentException($"No handler for {request.GetType().Name}");
        }
    }

    public async Task Publish(INotification notification, CancellationToken cancellationToken = default)
    {
        switch (notification)
        {

            default:
                throw new ArgumentException($"No handlers for {notification.GetType().Name}");
        }
    }

    private Task<System.Guid> HandleSpecialProcessRequestWithBehaviors(
        Tests.ConstrainedPipeline.SpecialProcessRequest request,
        CancellationToken cancellationToken)
    {
        return
            _tests_ConstrainedPipeline_SpecialProcessingBehavior__tests_ConstrainedPipeline_SpecialProcessRequest.Handle(request, () =>
            _tests_ConstrainedPipeline_GenericLoggingBehavior__tests_ConstrainedPipeline_SpecialProcessRequest.Handle(request, () =>
            /* Request Handler */ _tests_ConstrainedPipeline_SpecialProcessRequestHandler.Value.Handle(request, cancellationToken),
            cancellationToken),
            cancellationToken);
    }

    private Task<int> HandleNormalRequestWithBehaviors(
        Tests.ConstrainedPipeline.NormalRequest request,
        CancellationToken cancellationToken)
    {
        return
            _tests_ConstrainedPipeline_GenericLoggingBehavior__tests_ConstrainedPipeline_NormalRequest.Handle(request, () =>
            /* Request Handler */ _tests_ConstrainedPipeline_NormalRequestHandler.Value.Handle(request, cancellationToken),
            cancellationToken);
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    [DebuggerStepThrough]
    private T ToResponse<T>(object result)
    {
        return (T) result;
    }
}