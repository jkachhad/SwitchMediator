//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by SwitchMediator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using System.Runtime.CompilerServices;
using System.Diagnostics;

namespace Mediator.Switch;

#pragma warning disable CS1998

public class SwitchMediator : IMediator
{
    private readonly Test.Constrained.SpecialProcessRequestHandler _test_Constrained_SpecialProcessRequestHandler;
    private readonly Test.Constrained.NormalRequestHandler _test_Constrained_NormalRequestHandler;
    private readonly Test.Constrained.GenericLoggingBehavior<Test.Constrained.SpecialProcessRequest, System.Guid> _test_Constrained_GenericLoggingBehavior__test_Constrained_SpecialProcessRequest;
    private readonly Test.Constrained.SpecialProcessingBehavior<Test.Constrained.SpecialProcessRequest, System.Guid> _test_Constrained_SpecialProcessingBehavior__test_Constrained_SpecialProcessRequest;
    private readonly Test.Constrained.GenericLoggingBehavior<Test.Constrained.NormalRequest, int> _test_Constrained_GenericLoggingBehavior__test_Constrained_NormalRequest;

    public SwitchMediator(
        Test.Constrained.SpecialProcessRequestHandler test_Constrained_SpecialProcessRequestHandler,
        Test.Constrained.NormalRequestHandler test_Constrained_NormalRequestHandler,
        Test.Constrained.GenericLoggingBehavior<Test.Constrained.SpecialProcessRequest, System.Guid> test_Constrained_GenericLoggingBehavior__test_Constrained_SpecialProcessRequest,
        Test.Constrained.SpecialProcessingBehavior<Test.Constrained.SpecialProcessRequest, System.Guid> test_Constrained_SpecialProcessingBehavior__test_Constrained_SpecialProcessRequest,
        Test.Constrained.GenericLoggingBehavior<Test.Constrained.NormalRequest, int> test_Constrained_GenericLoggingBehavior__test_Constrained_NormalRequest)
    {
        _test_Constrained_SpecialProcessRequestHandler = test_Constrained_SpecialProcessRequestHandler;
        _test_Constrained_NormalRequestHandler = test_Constrained_NormalRequestHandler;
        _test_Constrained_GenericLoggingBehavior__test_Constrained_SpecialProcessRequest = test_Constrained_GenericLoggingBehavior__test_Constrained_SpecialProcessRequest;
        _test_Constrained_SpecialProcessingBehavior__test_Constrained_SpecialProcessRequest = test_Constrained_SpecialProcessingBehavior__test_Constrained_SpecialProcessRequest;
        _test_Constrained_GenericLoggingBehavior__test_Constrained_NormalRequest = test_Constrained_GenericLoggingBehavior__test_Constrained_NormalRequest;
    }

    public async Task<TResponse> Send<TResponse>(IRequest<TResponse> request)
    {
        switch (request)
        {
            case Test.Constrained.NormalRequest test_Constrained_NormalRequest:
                return ToResponse<TResponse>(
                    await HandleNormalRequestWithBehaviors(test_Constrained_NormalRequest));
            case Test.Constrained.SpecialProcessRequest test_Constrained_SpecialProcessRequest:
                return ToResponse<TResponse>(
                    await HandleSpecialProcessRequestWithBehaviors(test_Constrained_SpecialProcessRequest));
            default:
                throw new ArgumentException($"No handler for {request.GetType().Name}");
        }
    }

    public async Task Publish(INotification notification)
    {
        switch (notification)
        {

            default:
                throw new ArgumentException($"No handlers for {notification.GetType().Name}");
        }
    }

    private async Task<System.Guid> HandleSpecialProcessRequestWithBehaviors(Test.Constrained.SpecialProcessRequest request)
    {
        return await _test_Constrained_SpecialProcessingBehavior__test_Constrained_SpecialProcessRequest.Handle(request, async () =>
            await _test_Constrained_GenericLoggingBehavior__test_Constrained_SpecialProcessRequest.Handle(request, async () =>
            await _test_Constrained_SpecialProcessRequestHandler.Handle(request)));
    }

    private async Task<int> HandleNormalRequestWithBehaviors(Test.Constrained.NormalRequest request)
    {
        return await _test_Constrained_GenericLoggingBehavior__test_Constrained_NormalRequest.Handle(request, async () =>
            await _test_Constrained_NormalRequestHandler.Handle(request));
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    [DebuggerStepThrough]
    private T ToResponse<T>(object result)
    {
        return (T) result;
    }
}