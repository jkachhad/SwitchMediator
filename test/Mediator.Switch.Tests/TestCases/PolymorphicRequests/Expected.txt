//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by SwitchMediator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Threading;
using System.Threading.Tasks;

namespace Mediator.Switch;

#pragma warning disable CS1998

public class SwitchMediator : IMediator
{
    private readonly Test.PolymorphicDispatch.DogRequestHandler _test_PolymorphicDispatch_DogRequestHandler;
    private readonly Test.PolymorphicDispatch.CatRequestHandler _test_PolymorphicDispatch_CatRequestHandler;
    private readonly Test.PolymorphicDispatch.GenericAnimalRequestHandler _test_PolymorphicDispatch_GenericAnimalRequestHandler;
    private readonly Test.PolymorphicDispatch.CarRequestHandler _test_PolymorphicDispatch_CarRequestHandler;
    private readonly IEnumerable<INotificationHandler<Test.PolymorphicDispatch.DomainEvent>> _test_PolymorphicDispatch_DomainEvent__Handlers;
    private readonly IEnumerable<INotificationHandler<Test.PolymorphicDispatch.UserCreatedEvent>> _test_PolymorphicDispatch_UserCreatedEvent__Handlers;
    private readonly IEnumerable<INotificationHandler<Test.PolymorphicDispatch.OrderPlacedEvent>> _test_PolymorphicDispatch_OrderPlacedEvent__Handlers;

    public SwitchMediator(
        Test.PolymorphicDispatch.DogRequestHandler test_PolymorphicDispatch_DogRequestHandler,
        Test.PolymorphicDispatch.CatRequestHandler test_PolymorphicDispatch_CatRequestHandler,
        Test.PolymorphicDispatch.GenericAnimalRequestHandler test_PolymorphicDispatch_GenericAnimalRequestHandler,
        Test.PolymorphicDispatch.CarRequestHandler test_PolymorphicDispatch_CarRequestHandler,
        IEnumerable<INotificationHandler<Test.PolymorphicDispatch.DomainEvent>> test_PolymorphicDispatch_DomainEvent__Handlers,
        IEnumerable<INotificationHandler<Test.PolymorphicDispatch.UserCreatedEvent>> test_PolymorphicDispatch_UserCreatedEvent__Handlers,
        IEnumerable<INotificationHandler<Test.PolymorphicDispatch.OrderPlacedEvent>> test_PolymorphicDispatch_OrderPlacedEvent__Handlers)
    {
        _test_PolymorphicDispatch_DogRequestHandler = test_PolymorphicDispatch_DogRequestHandler;
        _test_PolymorphicDispatch_CatRequestHandler = test_PolymorphicDispatch_CatRequestHandler;
        _test_PolymorphicDispatch_GenericAnimalRequestHandler = test_PolymorphicDispatch_GenericAnimalRequestHandler;
        _test_PolymorphicDispatch_CarRequestHandler = test_PolymorphicDispatch_CarRequestHandler;
        _test_PolymorphicDispatch_DomainEvent__Handlers = test_PolymorphicDispatch_DomainEvent__Handlers;
        _test_PolymorphicDispatch_UserCreatedEvent__Handlers = test_PolymorphicDispatch_UserCreatedEvent__Handlers;
        _test_PolymorphicDispatch_OrderPlacedEvent__Handlers = test_PolymorphicDispatch_OrderPlacedEvent__Handlers;
    }

    public async Task<TResponse> Send<TResponse>(IRequest<TResponse> request, CancellationToken cancellationToken = default)
    {
        switch (request)
        {
            case Test.PolymorphicDispatch.CatRequest test_PolymorphicDispatch_CatRequest:
                return ToResponse<TResponse>(
                    await HandleCatRequestWithBehaviors(test_PolymorphicDispatch_CatRequest, cancellationToken));
            case Test.PolymorphicDispatch.DogRequest test_PolymorphicDispatch_DogRequest:
                return ToResponse<TResponse>(
                    await HandleDogRequestWithBehaviors(test_PolymorphicDispatch_DogRequest, cancellationToken));
            case Test.PolymorphicDispatch.AnimalRequest test_PolymorphicDispatch_AnimalRequest:
                return ToResponse<TResponse>(
                    await HandleAnimalRequestWithBehaviors(test_PolymorphicDispatch_AnimalRequest, cancellationToken));
            case Test.PolymorphicDispatch.CarRequest test_PolymorphicDispatch_CarRequest:
                return ToResponse<TResponse>(
                    await HandleCarRequestWithBehaviors(test_PolymorphicDispatch_CarRequest, cancellationToken));
            default:
                throw new ArgumentException($"No handler for {request.GetType().Name}");
        }
    }

    public async Task Publish(INotification notification, CancellationToken cancellationToken = default)
    {
        switch (notification)
        {
            case Test.PolymorphicDispatch.OrderPlacedEvent test_PolymorphicDispatch_OrderPlacedEvent:
            {
                foreach (var handler in _test_PolymorphicDispatch_OrderPlacedEvent__Handlers)
                {
                    await handler.Handle(test_PolymorphicDispatch_OrderPlacedEvent, cancellationToken);
                }
                break;
            }
            case Test.PolymorphicDispatch.UserCreatedEvent test_PolymorphicDispatch_UserCreatedEvent:
            {
                foreach (var handler in _test_PolymorphicDispatch_UserCreatedEvent__Handlers)
                {
                    await handler.Handle(test_PolymorphicDispatch_UserCreatedEvent, cancellationToken);
                }
                break;
            }
            case Test.PolymorphicDispatch.DomainEvent test_PolymorphicDispatch_DomainEvent:
            {
                foreach (var handler in _test_PolymorphicDispatch_DomainEvent__Handlers)
                {
                    await handler.Handle(test_PolymorphicDispatch_DomainEvent, cancellationToken);
                }
                break;
            }
            default:
                throw new ArgumentException($"No handlers for {notification.GetType().Name}");
        }
    }

    private async Task<string> HandleAnimalRequestWithBehaviors(
        Test.PolymorphicDispatch.AnimalRequest request,
        CancellationToken cancellationToken)
    {
        return
            /* Request Handler */ await _test_PolymorphicDispatch_GenericAnimalRequestHandler.Handle(request, cancellationToken);
    }

    private async Task<string> HandleDogRequestWithBehaviors(
        Test.PolymorphicDispatch.DogRequest request,
        CancellationToken cancellationToken)
    {
        return
            /* Request Handler */ await _test_PolymorphicDispatch_DogRequestHandler.Handle(request, cancellationToken);
    }

    private async Task<string> HandleCatRequestWithBehaviors(
        Test.PolymorphicDispatch.CatRequest request,
        CancellationToken cancellationToken)
    {
        return
            /* Request Handler */ await _test_PolymorphicDispatch_CatRequestHandler.Handle(request, cancellationToken);
    }

    private async Task<double> HandleCarRequestWithBehaviors(
        Test.PolymorphicDispatch.CarRequest request,
        CancellationToken cancellationToken)
    {
        return
            /* Request Handler */ await _test_PolymorphicDispatch_CarRequestHandler.Handle(request, cancellationToken);
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    [DebuggerStepThrough]
    private T ToResponse<T>(object result)
    {
        return (T) result;
    }
}