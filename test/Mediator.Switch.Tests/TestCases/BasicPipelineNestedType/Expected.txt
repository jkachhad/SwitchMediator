//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by SwitchMediator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Threading;
using System.Threading.Tasks;

namespace Mediator.Switch;

#pragma warning disable CS1998

public class SwitchMediator : IMediator
{
    private readonly Test.BasicPipelineNestedType.PingHandler _test_BasicPipelineNestedType_PingHandler;
    private readonly Test.BasicPipelineNestedType.GenericBehavior<Test.BasicPipelineNestedType.Ping, Test.BasicPipelineNestedType.Result<Test.BasicPipelineNestedType.VersionedResponse>> _test_BasicPipelineNestedType_GenericBehavior__test_BasicPipelineNestedType_Ping;

    public SwitchMediator(
        Test.BasicPipelineNestedType.PingHandler test_BasicPipelineNestedType_PingHandler,
        Test.BasicPipelineNestedType.GenericBehavior<Test.BasicPipelineNestedType.Ping, Test.BasicPipelineNestedType.Result<Test.BasicPipelineNestedType.VersionedResponse>> test_BasicPipelineNestedType_GenericBehavior__test_BasicPipelineNestedType_Ping)
    {
        _test_BasicPipelineNestedType_PingHandler = test_BasicPipelineNestedType_PingHandler;
        _test_BasicPipelineNestedType_GenericBehavior__test_BasicPipelineNestedType_Ping = test_BasicPipelineNestedType_GenericBehavior__test_BasicPipelineNestedType_Ping;
    }

    public Task<TResponse> Send<TResponse>(IRequest<TResponse> request, CancellationToken cancellationToken = default)
    {
        switch (request)
        {
            case Test.BasicPipelineNestedType.Ping test_BasicPipelineNestedType_Ping:
                return ToResponse<Task<TResponse>>(
                    HandlePingWithBehaviors(test_BasicPipelineNestedType_Ping, cancellationToken));
            default:
                throw new ArgumentException($"No handler for {request.GetType().Name}");
        }
    }

    public async Task Publish(INotification notification, CancellationToken cancellationToken = default)
    {
        switch (notification)
        {

            default:
                throw new ArgumentException($"No handlers for {notification.GetType().Name}");
        }
    }

    private Task<Test.BasicPipelineNestedType.Result<Test.BasicPipelineNestedType.VersionedResponse>> HandlePingWithBehaviors(
        Test.BasicPipelineNestedType.Ping request,
        CancellationToken cancellationToken)
    {
        return
            _test_BasicPipelineNestedType_GenericBehavior__test_BasicPipelineNestedType_Ping.Handle(request, () =>
            /* Request Handler */ _test_BasicPipelineNestedType_PingHandler.Handle(request, cancellationToken),
            cancellationToken);
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    [DebuggerStepThrough]
    private T ToResponse<T>(object result)
    {
        return (T) result;
    }
}