//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by SwitchMediator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Threading;
using System.Threading.Tasks;

namespace Mediator.Switch;

#pragma warning disable CS1998

public class SwitchMediator : IMediator
{
    private readonly Test.Basic.PingHandler _test_Basic_PingHandler;

    public SwitchMediator(
        Test.Basic.PingHandler test_Basic_PingHandler)
    {
        _test_Basic_PingHandler = test_Basic_PingHandler;
    }

    public Task<TResponse> Send<TResponse>(IRequest<TResponse> request, CancellationToken cancellationToken = default)
    {
        switch (request)
        {
            case Test.Basic.Ping test_Basic_Ping:
                return ToResponse<Task<TResponse>>(
                    HandlePingWithBehaviors(test_Basic_Ping, cancellationToken));
            default:
                throw new ArgumentException($"No handler for {request.GetType().Name}");
        }
    }

    public async Task Publish(INotification notification, CancellationToken cancellationToken = default)
    {
        switch (notification)
        {

            default:
                throw new ArgumentException($"No handlers for {notification.GetType().Name}");
        }
    }

    private Task<string> HandlePingWithBehaviors(
        Test.Basic.Ping request,
        CancellationToken cancellationToken)
    {
        return
            /* Request Handler */ _test_Basic_PingHandler.Handle(request, cancellationToken);
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    [DebuggerStepThrough]
    private T ToResponse<T>(object result)
    {
        return (T) result;
    }
}