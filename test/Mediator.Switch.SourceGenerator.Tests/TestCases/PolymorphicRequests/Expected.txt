//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by SwitchMediator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Threading;
using System.Threading.Tasks;

namespace Mediator.Switch;

#pragma warning disable CS1998

public class SwitchMediator : IMediator
{
    #region Fields

    private readonly Tests.PolymorphicRequests.DogRequestHandler _tests_PolymorphicRequests_DogRequestHandler;
    private readonly Tests.PolymorphicRequests.CatRequestHandler _tests_PolymorphicRequests_CatRequestHandler;
    private readonly Tests.PolymorphicRequests.GenericAnimalRequestHandler _tests_PolymorphicRequests_GenericAnimalRequestHandler;
    private readonly Tests.PolymorphicRequests.CarRequestHandler _tests_PolymorphicRequests_CarRequestHandler;
    private readonly Tests.PolymorphicRequests.VehicleRequestHandler _tests_PolymorphicRequests_VehicleRequestHandler;
    private readonly IEnumerable<INotificationHandler<Tests.PolymorphicRequests.UserCreatedEvent>> _tests_PolymorphicRequests_UserCreatedEvent__Handlers;
    private readonly IEnumerable<INotificationHandler<Tests.PolymorphicRequests.OrderPlacedEvent>> _tests_PolymorphicRequests_OrderPlacedEvent__Handlers;

    #endregion

    #region Constructor

    public SwitchMediator(
        Tests.PolymorphicRequests.DogRequestHandler tests_PolymorphicRequests_DogRequestHandler,
        Tests.PolymorphicRequests.CatRequestHandler tests_PolymorphicRequests_CatRequestHandler,
        Tests.PolymorphicRequests.GenericAnimalRequestHandler tests_PolymorphicRequests_GenericAnimalRequestHandler,
        Tests.PolymorphicRequests.CarRequestHandler tests_PolymorphicRequests_CarRequestHandler,
        Tests.PolymorphicRequests.VehicleRequestHandler tests_PolymorphicRequests_VehicleRequestHandler,
        IEnumerable<INotificationHandler<Tests.PolymorphicRequests.UserCreatedEvent>> tests_PolymorphicRequests_UserCreatedEvent__Handlers,
        IEnumerable<INotificationHandler<Tests.PolymorphicRequests.OrderPlacedEvent>> tests_PolymorphicRequests_OrderPlacedEvent__Handlers)
    {
        _tests_PolymorphicRequests_DogRequestHandler = tests_PolymorphicRequests_DogRequestHandler;
        _tests_PolymorphicRequests_CatRequestHandler = tests_PolymorphicRequests_CatRequestHandler;
        _tests_PolymorphicRequests_GenericAnimalRequestHandler = tests_PolymorphicRequests_GenericAnimalRequestHandler;
        _tests_PolymorphicRequests_CarRequestHandler = tests_PolymorphicRequests_CarRequestHandler;
        _tests_PolymorphicRequests_VehicleRequestHandler = tests_PolymorphicRequests_VehicleRequestHandler;
        _tests_PolymorphicRequests_UserCreatedEvent__Handlers = tests_PolymorphicRequests_UserCreatedEvent__Handlers;
        _tests_PolymorphicRequests_OrderPlacedEvent__Handlers = tests_PolymorphicRequests_OrderPlacedEvent__Handlers;
    }

    #endregion

    public Task<TResponse> Send<TResponse>(IRequest<TResponse> request, CancellationToken cancellationToken = default)
    {
        switch (request)
        {
            case Tests.PolymorphicRequests.CatRequest tests_PolymorphicRequests_CatRequest:
                return ToResponse<Task<TResponse>>(
                    Handle_Tests_PolymorphicRequests_CatRequest(tests_PolymorphicRequests_CatRequest, cancellationToken));
            case Tests.PolymorphicRequests.DogRequest tests_PolymorphicRequests_DogRequest:
                return ToResponse<Task<TResponse>>(
                    Handle_Tests_PolymorphicRequests_DogRequest(tests_PolymorphicRequests_DogRequest, cancellationToken));
            case Tests.PolymorphicRequests.AnimalRequest tests_PolymorphicRequests_AnimalRequest:
                return ToResponse<Task<TResponse>>(
                    Handle_Tests_PolymorphicRequests_AnimalRequest(tests_PolymorphicRequests_AnimalRequest, cancellationToken));
            case Tests.PolymorphicRequests.CarRequest tests_PolymorphicRequests_CarRequest:
                return ToResponse<Task<TResponse>>(
                    Handle_Tests_PolymorphicRequests_CarRequest(tests_PolymorphicRequests_CarRequest, cancellationToken));
            case Tests.PolymorphicRequests.TruckRequest tests_PolymorphicRequests_TruckRequest:
                return ToResponse<Task<TResponse>>(
                    Handle_Tests_PolymorphicRequests_VehicleRequest(tests_PolymorphicRequests_TruckRequest, cancellationToken));
            case Tests.PolymorphicRequests.VehicleRequest tests_PolymorphicRequests_VehicleRequest:
                return ToResponse<Task<TResponse>>(
                    Handle_Tests_PolymorphicRequests_VehicleRequest(tests_PolymorphicRequests_VehicleRequest, cancellationToken));
            default:
                throw new ArgumentException($"No handler for {request.GetType().Name}");
        }
    }

    public async Task Publish(INotification notification, CancellationToken cancellationToken = default)
    {
        switch (notification)
        {
            case Tests.PolymorphicRequests.OrderPlacedEvent tests_PolymorphicRequests_OrderPlacedEvent:
            {
                foreach (var handler in _tests_PolymorphicRequests_OrderPlacedEvent__Handlers)
                {
                    await handler.Handle(tests_PolymorphicRequests_OrderPlacedEvent, cancellationToken);
                }
                break;
            }
            case Tests.PolymorphicRequests.UserCreatedEvent tests_PolymorphicRequests_UserCreatedEvent:
            {
                foreach (var handler in _tests_PolymorphicRequests_UserCreatedEvent__Handlers)
                {
                    await handler.Handle(tests_PolymorphicRequests_UserCreatedEvent, cancellationToken);
                }
                break;
            }
            default:
                throw new ArgumentException($"No handlers for {notification.GetType().Name}");
        }
    }

    private Task<string> Handle_Tests_PolymorphicRequests_AnimalRequest(
        Tests.PolymorphicRequests.AnimalRequest request,
        CancellationToken cancellationToken)
    {
        return
            /* Request Handler */ _tests_PolymorphicRequests_GenericAnimalRequestHandler.Handle(request, cancellationToken);
    }

    private Task<string> Handle_Tests_PolymorphicRequests_DogRequest(
        Tests.PolymorphicRequests.DogRequest request,
        CancellationToken cancellationToken)
    {
        return
            /* Request Handler */ _tests_PolymorphicRequests_DogRequestHandler.Handle(request, cancellationToken);
    }

    private Task<string> Handle_Tests_PolymorphicRequests_CatRequest(
        Tests.PolymorphicRequests.CatRequest request,
        CancellationToken cancellationToken)
    {
        return
            /* Request Handler */ _tests_PolymorphicRequests_CatRequestHandler.Handle(request, cancellationToken);
    }

    private Task<double> Handle_Tests_PolymorphicRequests_VehicleRequest(
        Tests.PolymorphicRequests.VehicleRequest request,
        CancellationToken cancellationToken)
    {
        return
            /* Request Handler */ _tests_PolymorphicRequests_VehicleRequestHandler.Handle(request, cancellationToken);
    }

    private Task<double> Handle_Tests_PolymorphicRequests_CarRequest(
        Tests.PolymorphicRequests.CarRequest request,
        CancellationToken cancellationToken)
    {
        return
            /* Request Handler */ _tests_PolymorphicRequests_CarRequestHandler.Handle(request, cancellationToken);
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    [DebuggerStepThrough]
    private T ToResponse<T>(object result)
    {
        return (T) result;
    }
}