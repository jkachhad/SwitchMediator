//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by SwitchMediator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Threading;
using System.Threading.Tasks;

namespace Mediator.Switch;

#pragma warning disable CS1998

public class SwitchMediator : IMediator
{
    #region Fields

    private readonly Tests.Notifications.SimpleRequestHandler _tests_Notifications_SimpleRequestHandler;
    private readonly IEnumerable<INotificationHandler<Tests.Notifications.OrderCreatedEvent>> _tests_Notifications_OrderCreatedEvent__Handlers;

    #endregion

    #region Constructor

    public SwitchMediator(
        Tests.Notifications.SimpleRequestHandler tests_Notifications_SimpleRequestHandler,
        IEnumerable<INotificationHandler<Tests.Notifications.OrderCreatedEvent>> tests_Notifications_OrderCreatedEvent__Handlers)
    {
        _tests_Notifications_SimpleRequestHandler = tests_Notifications_SimpleRequestHandler;
        _tests_Notifications_OrderCreatedEvent__Handlers = tests_Notifications_OrderCreatedEvent__Handlers;
    }

    #endregion

    public Task<TResponse> Send<TResponse>(IRequest<TResponse> request, CancellationToken cancellationToken = default)
    {
        switch (request)
        {
            case Tests.Notifications.SimpleRequest tests_Notifications_SimpleRequest:
                return ToResponse<Task<TResponse>>(
                    Handle_Tests_Notifications_SimpleRequest(tests_Notifications_SimpleRequest, cancellationToken));
            default:
                throw new ArgumentException($"No handler for {request.GetType().Name}");
        }
    }

    public async Task Publish(INotification notification, CancellationToken cancellationToken = default)
    {
        switch (notification)
        {
            case Tests.Notifications.OrderCreatedEvent tests_Notifications_OrderCreatedEvent:
            {
                foreach (var handler in _tests_Notifications_OrderCreatedEvent__Handlers)
                {
                    await handler.Handle(tests_Notifications_OrderCreatedEvent, cancellationToken);
                }
                break;
            }
            default:
                throw new ArgumentException($"No handlers for {notification.GetType().Name}");
        }
    }

    private Task<bool> Handle_Tests_Notifications_SimpleRequest(
        Tests.Notifications.SimpleRequest request,
        CancellationToken cancellationToken)
    {
        return
            /* Request Handler */ _tests_Notifications_SimpleRequestHandler.Handle(request, cancellationToken);
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    [DebuggerStepThrough]
    private T ToResponse<T>(object result)
    {
        return (T) result;
    }
}