//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by SwitchMediator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;

namespace Mediator.Switch;

#pragma warning disable CS1998

public class SwitchMediator : IMediator
{
    #region Fields

    private readonly Tests.Polymorphics.DogRequestHandler _tests_Polymorphics_DogRequestHandler;
    private readonly Tests.Polymorphics.CatRequestHandler _tests_Polymorphics_CatRequestHandler;
    private readonly Tests.Polymorphics.GenericAnimalRequestHandler _tests_Polymorphics_GenericAnimalRequestHandler;
    private readonly Tests.Polymorphics.CarRequestHandler _tests_Polymorphics_CarRequestHandler;
    private readonly Tests.Polymorphics.VehicleRequestHandler _tests_Polymorphics_VehicleRequestHandler;
    private readonly IEnumerable<INotificationHandler<Tests.Polymorphics.UserCreatedEvent>> _tests_Polymorphics_UserCreatedEvent__Handlers;
    private readonly IEnumerable<INotificationHandler<Tests.Polymorphics.OrderPlacedEvent>> _tests_Polymorphics_OrderPlacedEvent__Handlers;

    #endregion

    #region Constructor

    public SwitchMediator(
        Tests.Polymorphics.DogRequestHandler tests_Polymorphics_DogRequestHandler,
        Tests.Polymorphics.CatRequestHandler tests_Polymorphics_CatRequestHandler,
        Tests.Polymorphics.GenericAnimalRequestHandler tests_Polymorphics_GenericAnimalRequestHandler,
        Tests.Polymorphics.CarRequestHandler tests_Polymorphics_CarRequestHandler,
        Tests.Polymorphics.VehicleRequestHandler tests_Polymorphics_VehicleRequestHandler,
        IEnumerable<INotificationHandler<Tests.Polymorphics.UserCreatedEvent>> tests_Polymorphics_UserCreatedEvent__Handlers,
        IEnumerable<INotificationHandler<Tests.Polymorphics.OrderPlacedEvent>> tests_Polymorphics_OrderPlacedEvent__Handlers)
    {
        _tests_Polymorphics_DogRequestHandler = tests_Polymorphics_DogRequestHandler;
        _tests_Polymorphics_CatRequestHandler = tests_Polymorphics_CatRequestHandler;
        _tests_Polymorphics_GenericAnimalRequestHandler = tests_Polymorphics_GenericAnimalRequestHandler;
        _tests_Polymorphics_CarRequestHandler = tests_Polymorphics_CarRequestHandler;
        _tests_Polymorphics_VehicleRequestHandler = tests_Polymorphics_VehicleRequestHandler;
        _tests_Polymorphics_UserCreatedEvent__Handlers = tests_Polymorphics_UserCreatedEvent__Handlers;
        _tests_Polymorphics_OrderPlacedEvent__Handlers = tests_Polymorphics_OrderPlacedEvent__Handlers;
    }

    #endregion

    public static (IReadOnlyList<Type> RequestHandlerTypes, IReadOnlyList<Type> NotificationHandlerTypes, IReadOnlyList<Type> PipelineBehaviorTypes) KnownTypes
    {
        get { return (SwitchMediatorKnownTypes.RequestHandlerTypes, SwitchMediatorKnownTypes.NotificationHandlerTypes, SwitchMediatorKnownTypes.PipelineBehaviorTypes); }
    }

    public Task<TResponse> Send<TResponse>(IRequest<TResponse> request, CancellationToken cancellationToken = default)
    {
        if (SendSwitchCase.Cases.TryGetValue(request.GetType(), out var handle))
        {
            return (Task<TResponse>)handle(this, request, cancellationToken);
        }

        throw new ArgumentException($"No handler for {request.GetType().Name}");
    }

    private static class SendSwitchCase
    {
        public static readonly Dictionary<Type, Func<SwitchMediator, object, CancellationToken, object>> Cases = new Dictionary<Type, Func<SwitchMediator, object, CancellationToken, object>>
        {
            { // case Tests.Polymorphics.CatRequest:
                typeof(Tests.Polymorphics.CatRequest), (instance, request, cancellationToken) =>
                    instance.Handle_Tests_Polymorphics_CatRequest(
                        (Tests.Polymorphics.CatRequest) request, cancellationToken)
            },
            { // case Tests.Polymorphics.DogRequest:
                typeof(Tests.Polymorphics.DogRequest), (instance, request, cancellationToken) =>
                    instance.Handle_Tests_Polymorphics_DogRequest(
                        (Tests.Polymorphics.DogRequest) request, cancellationToken)
            },
            { // case Tests.Polymorphics.AnimalRequest:
                typeof(Tests.Polymorphics.AnimalRequest), (instance, request, cancellationToken) =>
                    instance.Handle_Tests_Polymorphics_AnimalRequest(
                        (Tests.Polymorphics.AnimalRequest) request, cancellationToken)
            },
            { // case Tests.Polymorphics.CarRequest:
                typeof(Tests.Polymorphics.CarRequest), (instance, request, cancellationToken) =>
                    instance.Handle_Tests_Polymorphics_CarRequest(
                        (Tests.Polymorphics.CarRequest) request, cancellationToken)
            },
            { // case Tests.Polymorphics.TruckRequest:
                typeof(Tests.Polymorphics.TruckRequest), (instance, request, cancellationToken) =>
                    instance.Handle_Tests_Polymorphics_VehicleRequest(
                        (Tests.Polymorphics.TruckRequest) request, cancellationToken)
            },
            { // case Tests.Polymorphics.VehicleRequest:
                typeof(Tests.Polymorphics.VehicleRequest), (instance, request, cancellationToken) =>
                    instance.Handle_Tests_Polymorphics_VehicleRequest(
                        (Tests.Polymorphics.VehicleRequest) request, cancellationToken)
            }
        };
    }

    public Task Publish(INotification notification, CancellationToken cancellationToken = default)
    {
        if (PublishSwitchCase.Cases.TryGetValue(notification.GetType(), out var handle))
        {
            return handle(this, notification, cancellationToken);
        }

        throw new ArgumentException($"No handler for {notification.GetType().Name}");
    }

    private static class PublishSwitchCase
    {
        public static readonly Dictionary<Type, Func<SwitchMediator, INotification, CancellationToken, Task>> Cases = new Dictionary<Type, Func<SwitchMediator, INotification, CancellationToken, Task>>
        {
            { // case Tests.Polymorphics.OrderPlacedEvent:
                typeof(Tests.Polymorphics.OrderPlacedEvent), async (instance, notification, cancellationToken) =>
                {
                    foreach (var handler in instance._tests_Polymorphics_OrderPlacedEvent__Handlers)
                    {
                        await handler.Handle((Tests.Polymorphics.OrderPlacedEvent)notification, cancellationToken);
                    }
                }
            },
            { // case Tests.Polymorphics.UserCreatedEvent:
                typeof(Tests.Polymorphics.UserCreatedEvent), async (instance, notification, cancellationToken) =>
                {
                    foreach (var handler in instance._tests_Polymorphics_UserCreatedEvent__Handlers)
                    {
                        await handler.Handle((Tests.Polymorphics.UserCreatedEvent)notification, cancellationToken);
                    }
                }
            }
        };
    }

    private Task<string> Handle_Tests_Polymorphics_AnimalRequest(
        Tests.Polymorphics.AnimalRequest request,
        CancellationToken cancellationToken)
    {
        return
            /* Request Handler */ _tests_Polymorphics_GenericAnimalRequestHandler.Handle(request, cancellationToken);
    }

    private Task<string> Handle_Tests_Polymorphics_DogRequest(
        Tests.Polymorphics.DogRequest request,
        CancellationToken cancellationToken)
    {
        return
            /* Request Handler */ _tests_Polymorphics_DogRequestHandler.Handle(request, cancellationToken);
    }

    private Task<string> Handle_Tests_Polymorphics_CatRequest(
        Tests.Polymorphics.CatRequest request,
        CancellationToken cancellationToken)
    {
        return
            /* Request Handler */ _tests_Polymorphics_CatRequestHandler.Handle(request, cancellationToken);
    }

    private Task<double> Handle_Tests_Polymorphics_VehicleRequest(
        Tests.Polymorphics.VehicleRequest request,
        CancellationToken cancellationToken)
    {
        return
            /* Request Handler */ _tests_Polymorphics_VehicleRequestHandler.Handle(request, cancellationToken);
    }

    private Task<double> Handle_Tests_Polymorphics_CarRequest(
        Tests.Polymorphics.CarRequest request,
        CancellationToken cancellationToken)
    {
        return
            /* Request Handler */ _tests_Polymorphics_CarRequestHandler.Handle(request, cancellationToken);
    }

    /// <summary>
    /// Provides lists of SwitchMediator component implementation types.
    /// </summary>
    public static class SwitchMediatorKnownTypes
    {
        public static readonly IReadOnlyList<Type> RequestHandlerTypes =
            new Type[] {
                typeof(Tests.Polymorphics.DogRequestHandler),
                typeof(Tests.Polymorphics.CatRequestHandler),
                typeof(Tests.Polymorphics.GenericAnimalRequestHandler),
                typeof(Tests.Polymorphics.CarRequestHandler),
                typeof(Tests.Polymorphics.VehicleRequestHandler)
            }.AsReadOnly();

        public static readonly IReadOnlyList<Type> NotificationHandlerTypes =
           new Type[] {
                typeof(Tests.Polymorphics.UserCreatedEmailHandler),
                typeof(Tests.Polymorphics.OrderPlacedInventoryHandler),
                typeof(Tests.Polymorphics.GenericDomainEventHandler),
                typeof(Tests.Polymorphics.UserCreatedAnalyticsHandler)
           }.AsReadOnly();

        public static readonly IReadOnlyList<Type> PipelineBehaviorTypes =
           new Type[] {

           }.AsReadOnly();
    }
}