//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by SwitchMediator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#nullable enable

using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Threading;
using System.Threading.Tasks;

namespace Mediator.Switch;

#pragma warning disable CS1998, CS0169

public class SwitchMediator : IMediator
{
    #region Fields

    private Tests.Polymorphics.DogRequestHandler? _tests_Polymorphics_DogRequestHandler;
    private Tests.Polymorphics.CatRequestHandler? _tests_Polymorphics_CatRequestHandler;
    private Tests.Polymorphics.GenericAnimalRequestHandler? _tests_Polymorphics_GenericAnimalRequestHandler;
    private Tests.Polymorphics.CarRequestHandler? _tests_Polymorphics_CarRequestHandler;
    private Tests.Polymorphics.VehicleRequestHandler? _tests_Polymorphics_VehicleRequestHandler;
    private IEnumerable<INotificationHandler<Tests.Polymorphics.UserCreatedEvent>>? _tests_Polymorphics_UserCreatedEvent__Handlers;
    private IEnumerable<INotificationHandler<Tests.Polymorphics.OrderPlacedEvent>>? _tests_Polymorphics_OrderPlacedEvent__Handlers;

    private readonly ISwitchMediatorServiceProvider _svc;

    #endregion

    #region Constructor

    public SwitchMediator(ISwitchMediatorServiceProvider serviceProvider)
    {
        _svc = serviceProvider;
    }

    #endregion

    public static (IReadOnlyList<Type> RequestHandlerTypes, IReadOnlyList<(Type NotificationType, IReadOnlyList<Type> HandlerTypes)> NotificationTypes, IReadOnlyList<Type> PipelineBehaviorTypes) KnownTypes
    {
        get { return (SwitchMediatorKnownTypes.RequestHandlerTypes, SwitchMediatorKnownTypes.NotificationTypes, SwitchMediatorKnownTypes.PipelineBehaviorTypes); }
    }

    public Task<TResponse> Send<TResponse>(IRequest<TResponse> request, CancellationToken cancellationToken = default)
    {
        if (SendSwitchCase.Cases.TryGetValue(request.GetType(), out var handle))
        {
            return (Task<TResponse>)handle(this, request, cancellationToken);
        }

        throw new ArgumentException($"No handler for {request.GetType().Name}");
    }

    private static class SendSwitchCase
    {
        public static readonly Dictionary<Type, Func<SwitchMediator, object, CancellationToken, object>> Cases = new Dictionary<Type, Func<SwitchMediator, object, CancellationToken, object>>
        {
            { // case Tests.Polymorphics.CatRequest:
                typeof(Tests.Polymorphics.CatRequest), (instance, request, cancellationToken) =>
                    instance.Handle_Tests_Polymorphics_CatRequest(
                        (Tests.Polymorphics.CatRequest) request, cancellationToken)
            },
            { // case Tests.Polymorphics.DogRequest:
                typeof(Tests.Polymorphics.DogRequest), (instance, request, cancellationToken) =>
                    instance.Handle_Tests_Polymorphics_DogRequest(
                        (Tests.Polymorphics.DogRequest) request, cancellationToken)
            },
            { // case Tests.Polymorphics.AnimalRequest:
                typeof(Tests.Polymorphics.AnimalRequest), (instance, request, cancellationToken) =>
                    instance.Handle_Tests_Polymorphics_AnimalRequest(
                        (Tests.Polymorphics.AnimalRequest) request, cancellationToken)
            },
            { // case Tests.Polymorphics.CarRequest:
                typeof(Tests.Polymorphics.CarRequest), (instance, request, cancellationToken) =>
                    instance.Handle_Tests_Polymorphics_CarRequest(
                        (Tests.Polymorphics.CarRequest) request, cancellationToken)
            },
            { // case Tests.Polymorphics.TruckRequest:
                typeof(Tests.Polymorphics.TruckRequest), (instance, request, cancellationToken) =>
                    instance.Handle_Tests_Polymorphics_VehicleRequest(
                        (Tests.Polymorphics.TruckRequest) request, cancellationToken)
            },
            { // case Tests.Polymorphics.VehicleRequest:
                typeof(Tests.Polymorphics.VehicleRequest), (instance, request, cancellationToken) =>
                    instance.Handle_Tests_Polymorphics_VehicleRequest(
                        (Tests.Polymorphics.VehicleRequest) request, cancellationToken)
            }
        };
    }

    public Task Publish(INotification notification, CancellationToken cancellationToken = default)
    {
        if (PublishSwitchCase.Cases.TryGetValue(notification.GetType(), out var handle))
        {
            return handle(this, notification, cancellationToken);
        }

        throw new ArgumentException($"No handler for {notification.GetType().Name}");
    }

    private static class PublishSwitchCase
    {
        public static readonly Dictionary<Type, Func<SwitchMediator, INotification, CancellationToken, Task>> Cases = new Dictionary<Type, Func<SwitchMediator, INotification, CancellationToken, Task>>
        {
            { // case Tests.Polymorphics.OrderPlacedEvent:
                typeof(Tests.Polymorphics.OrderPlacedEvent), async (instance, notification, cancellationToken) =>
                {
                    foreach (var handler in instance.Get(ref instance._tests_Polymorphics_OrderPlacedEvent__Handlers))
                    {
                        await handler.Handle((Tests.Polymorphics.OrderPlacedEvent)notification, cancellationToken);
                    }
                }
            },
            { // case Tests.Polymorphics.UserCreatedEvent:
                typeof(Tests.Polymorphics.UserCreatedEvent), async (instance, notification, cancellationToken) =>
                {
                    foreach (var handler in instance.Get(ref instance._tests_Polymorphics_UserCreatedEvent__Handlers))
                    {
                        await handler.Handle((Tests.Polymorphics.UserCreatedEvent)notification, cancellationToken);
                    }
                }
            }
        };
    }

    private Task<string> Handle_Tests_Polymorphics_AnimalRequest(
        Tests.Polymorphics.AnimalRequest request,
        CancellationToken cancellationToken)
    {
        return
            /* Request Handler */ Get(ref _tests_Polymorphics_GenericAnimalRequestHandler).Handle(request, cancellationToken);
    }

    private Task<string> Handle_Tests_Polymorphics_DogRequest(
        Tests.Polymorphics.DogRequest request,
        CancellationToken cancellationToken)
    {
        return
            /* Request Handler */ Get(ref _tests_Polymorphics_DogRequestHandler).Handle(request, cancellationToken);
    }

    private Task<string> Handle_Tests_Polymorphics_CatRequest(
        Tests.Polymorphics.CatRequest request,
        CancellationToken cancellationToken)
    {
        return
            /* Request Handler */ Get(ref _tests_Polymorphics_CatRequestHandler).Handle(request, cancellationToken);
    }

    private Task<double> Handle_Tests_Polymorphics_VehicleRequest(
        Tests.Polymorphics.VehicleRequest request,
        CancellationToken cancellationToken)
    {
        return
            /* Request Handler */ Get(ref _tests_Polymorphics_VehicleRequestHandler).Handle(request, cancellationToken);
    }

    private Task<double> Handle_Tests_Polymorphics_CarRequest(
        Tests.Polymorphics.CarRequest request,
        CancellationToken cancellationToken)
    {
        return
            /* Request Handler */ Get(ref _tests_Polymorphics_CarRequestHandler).Handle(request, cancellationToken);
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    [DebuggerStepThrough]
    private T Get<T>(ref T? field) where T : notnull
    {
        return field ?? (field = _svc.Get<T>());
    }

    /// <summary>
    /// Provides lists of SwitchMediator component implementation types.
    /// </summary>
    public static class SwitchMediatorKnownTypes
    {
        public static readonly IReadOnlyList<Type> RequestHandlerTypes =
            new Type[] {
                typeof(Tests.Polymorphics.DogRequestHandler),
                typeof(Tests.Polymorphics.CatRequestHandler),
                typeof(Tests.Polymorphics.GenericAnimalRequestHandler),
                typeof(Tests.Polymorphics.CarRequestHandler),
                typeof(Tests.Polymorphics.VehicleRequestHandler)
            }.AsReadOnly();

        public static readonly IReadOnlyList<(Type NotificationType, IReadOnlyList<Type> HandlerTypes)> NotificationTypes =
           new (Type NotificationType, IReadOnlyList<Type> HandlerTypes)[] {
                (typeof(Tests.Polymorphics.UserCreatedEvent), new Type[] {
                    typeof(Tests.Polymorphics.UserCreatedEmailHandler),
                    typeof(Tests.Polymorphics.UserCreatedAnalyticsHandler)
                }),
                (typeof(Tests.Polymorphics.OrderPlacedEvent), new Type[] {
                    typeof(Tests.Polymorphics.OrderPlacedInventoryHandler)
                })
           }.AsReadOnly();

        public static readonly IReadOnlyList<Type> PipelineBehaviorTypes =
           new Type[] {

           }.AsReadOnly();
    }
}