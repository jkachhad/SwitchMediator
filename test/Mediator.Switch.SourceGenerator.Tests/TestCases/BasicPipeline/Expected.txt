//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by SwitchMediator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Threading;
using System.Threading.Tasks;

namespace Mediator.Switch;

#pragma warning disable CS1998

public class SwitchMediator : IMediator
{
    #region Fields

    private readonly Tests.BasicPipeline.PingHandler _tests_BasicPipeline_PingHandler;
    private readonly Tests.BasicPipeline.GenericBehavior<Tests.BasicPipeline.Ping, string> _tests_BasicPipeline_GenericBehavior__tests_BasicPipeline_Ping;

    #endregion

    #region Constructor

    public SwitchMediator(
        Tests.BasicPipeline.PingHandler tests_BasicPipeline_PingHandler,
        Tests.BasicPipeline.GenericBehavior<Tests.BasicPipeline.Ping, string> tests_BasicPipeline_GenericBehavior__tests_BasicPipeline_Ping)
    {
        _tests_BasicPipeline_PingHandler = tests_BasicPipeline_PingHandler;
        _tests_BasicPipeline_GenericBehavior__tests_BasicPipeline_Ping = tests_BasicPipeline_GenericBehavior__tests_BasicPipeline_Ping;
    }

    #endregion

    public Task<TResponse> Send<TResponse>(IRequest<TResponse> request, CancellationToken cancellationToken = default)
    {
        switch (request)
        {
            case Tests.BasicPipeline.Ping tests_BasicPipeline_Ping:
                return ToResponse<Task<TResponse>>(
                    Handle_Tests_BasicPipeline_Ping(tests_BasicPipeline_Ping, cancellationToken));
            default:
                throw new ArgumentException($"No handler for {request.GetType().Name}");
        }
    }

    public async Task Publish(INotification notification, CancellationToken cancellationToken = default)
    {
        switch (notification)
        {

            default:
                throw new ArgumentException($"No handlers for {notification.GetType().Name}");
        }
    }

    private Task<string> Handle_Tests_BasicPipeline_Ping(
        Tests.BasicPipeline.Ping request,
        CancellationToken cancellationToken)
    {
        return
            _tests_BasicPipeline_GenericBehavior__tests_BasicPipeline_Ping.Handle(request, () =>
            /* Request Handler */ _tests_BasicPipeline_PingHandler.Handle(request, cancellationToken),
            cancellationToken);
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    [DebuggerStepThrough]
    private T ToResponse<T>(object result)
    {
        return (T) result;
    }
}