//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by SwitchMediator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#nullable enable

using System;
using System.Linq;
using System.Collections.Generic;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Threading;
using System.Threading.Tasks;

#if NET8_0_OR_GREATER
using System.Collections.Frozen;
#endif

namespace Mediator.Switch;

#pragma warning disable CS1998

public class SwitchMediator : IMediator
{
    #region Fields

    private Tests.BasicPipeline.PingHandler? _tests_BasicPipeline_PingHandler;
    private Tests.BasicPipeline.GenericBehavior<Tests.BasicPipeline.Ping, string>? _tests_BasicPipeline_GenericBehavior__tests_BasicPipeline_Ping;

    private readonly ISwitchMediatorServiceProvider _svc;

    #endregion

    #region Constructor

    public SwitchMediator(ISwitchMediatorServiceProvider serviceProvider)
    {
        _svc = serviceProvider;
    }

    #endregion

    public static (IReadOnlyList<Type> RequestHandlerTypes, IReadOnlyList<(Type NotificationType, IReadOnlyList<Type> HandlerTypes)> NotificationTypes, IReadOnlyList<Type> PipelineBehaviorTypes) KnownTypes
    {
        get { return (SwitchMediatorKnownTypes.RequestHandlerTypes, SwitchMediatorKnownTypes.NotificationTypes, SwitchMediatorKnownTypes.PipelineBehaviorTypes); }
    }

    public Task<TResponse> Send<TResponse>(IRequest<TResponse> request, CancellationToken cancellationToken = default)
    {
        if (SendSwitchCase.Cases.TryGetValue(request.GetType(), out var handle))
        {
            return (Task<TResponse>)handle(this, request, cancellationToken);
        }

        throw new ArgumentException($"No handler for {request.GetType().Name}");
    }

    private static class SendSwitchCase
    {
        public static readonly IDictionary<Type, Func<SwitchMediator, object, CancellationToken, object>> Cases = new (Type, Func<SwitchMediator, object, CancellationToken, object>)[]
        {
            ( // case Tests.BasicPipeline.Ping:
                typeof(Tests.BasicPipeline.Ping), (instance, request, cancellationToken) =>
                    instance.Handle_Tests_BasicPipeline_Ping(
                        (Tests.BasicPipeline.Ping) request, cancellationToken)
            )
        }
#if NET8_0_OR_GREATER
        .ToFrozenDictionary
#else
        .ToDictionary
#endif
            (t => t.Item1, t => t.Item2);
    }

    public Task Publish(INotification notification, CancellationToken cancellationToken = default)
    {
        if (PublishSwitchCase.Cases.TryGetValue(notification.GetType(), out var handle))
        {
            return handle(this, notification, cancellationToken);
        }

        return Task.CompletedTask;
    }

    private static class PublishSwitchCase
    {
        public static readonly IDictionary<Type, Func<SwitchMediator, INotification, CancellationToken, Task>> Cases = new (Type, Func<SwitchMediator, INotification, CancellationToken, Task>)[]
        {

        }
#if NET8_0_OR_GREATER
        .ToFrozenDictionary
#else
        .ToDictionary
#endif
            (t => t.Item1, t => t.Item2);
    }

    private Task<string> Handle_Tests_BasicPipeline_Ping(
        Tests.BasicPipeline.Ping request,
        CancellationToken cancellationToken)
    {
        var tests_BasicPipeline_GenericBehavior__tests_BasicPipeline_Ping = Get(ref _tests_BasicPipeline_GenericBehavior__tests_BasicPipeline_Ping);
        var tests_BasicPipeline_PingHandler = Get(ref _tests_BasicPipeline_PingHandler);

        return
            tests_BasicPipeline_GenericBehavior__tests_BasicPipeline_Ping.Handle(request, () =>
            /* Request Handler */ tests_BasicPipeline_PingHandler.Handle(request, cancellationToken),
            cancellationToken);
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    [DebuggerStepThrough]
    private T Get<T>(ref T? field) where T : notnull
    {
        return field ?? (field = _svc.Get<T>());
    }

    /// <summary>
    /// Provides lists of SwitchMediator component implementation types.
    /// </summary>
    public static class SwitchMediatorKnownTypes
    {
        public static readonly IReadOnlyList<Type> RequestHandlerTypes =
            new Type[] {
                typeof(Tests.BasicPipeline.PingHandler)
            }.AsReadOnly();

        public static readonly IReadOnlyList<(Type NotificationType, IReadOnlyList<Type> HandlerTypes)> NotificationTypes =
           new (Type NotificationType, IReadOnlyList<Type> HandlerTypes)[] {

           }.AsReadOnly();

        public static readonly IReadOnlyList<Type> PipelineBehaviorTypes =
           new Type[] {
                typeof(Tests.BasicPipeline.GenericBehavior<Tests.BasicPipeline.Ping, string>)
           }.AsReadOnly();
    }
}