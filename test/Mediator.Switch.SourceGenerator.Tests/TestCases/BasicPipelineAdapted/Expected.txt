//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by SwitchMediator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Threading;
using System.Threading.Tasks;

namespace Mediator.Switch;

#pragma warning disable CS1998

public class SwitchMediator : IMediator
{
    #region Fields

    private readonly Tests.BasicPipelineAdapted.PingHandler _tests_BasicPipelineAdapted_PingHandler;
    private readonly Tests.BasicPipelineAdapted.PongHandler _tests_BasicPipelineAdapted_PongHandler;
    private readonly Tests.BasicPipelineAdapted.GenericBehavior<Tests.BasicPipelineAdapted.Ping, Tests.BasicPipelineAdapted.VersionedResponse> _tests_BasicPipelineAdapted_GenericBehavior__tests_BasicPipelineAdapted_Ping;

    #endregion

    #region Constructor

    public SwitchMediator(
        Tests.BasicPipelineAdapted.PingHandler tests_BasicPipelineAdapted_PingHandler,
        Tests.BasicPipelineAdapted.PongHandler tests_BasicPipelineAdapted_PongHandler,
        Tests.BasicPipelineAdapted.GenericBehavior<Tests.BasicPipelineAdapted.Ping, Tests.BasicPipelineAdapted.VersionedResponse> tests_BasicPipelineAdapted_GenericBehavior__tests_BasicPipelineAdapted_Ping)
    {
        _tests_BasicPipelineAdapted_PingHandler = tests_BasicPipelineAdapted_PingHandler;
        _tests_BasicPipelineAdapted_PongHandler = tests_BasicPipelineAdapted_PongHandler;
        _tests_BasicPipelineAdapted_GenericBehavior__tests_BasicPipelineAdapted_Ping = tests_BasicPipelineAdapted_GenericBehavior__tests_BasicPipelineAdapted_Ping;
    }

    #endregion

    public Task<TResponse> Send<TResponse>(IRequest<TResponse> request, CancellationToken cancellationToken = default)
    {
        switch (request)
        {
            case Tests.BasicPipelineAdapted.Ping tests_BasicPipelineAdapted_Ping:
                return ToResponse<Task<TResponse>>(
                    Handle_Tests_BasicPipelineAdapted_Ping(tests_BasicPipelineAdapted_Ping, cancellationToken));
            case Tests.BasicPipelineAdapted.Pong tests_BasicPipelineAdapted_Pong:
                return ToResponse<Task<TResponse>>(
                    Handle_Tests_BasicPipelineAdapted_Pong(tests_BasicPipelineAdapted_Pong, cancellationToken));
            default:
                throw new ArgumentException($"No handler for {request.GetType().Name}");
        }
    }

    public async Task Publish(INotification notification, CancellationToken cancellationToken = default)
    {
        switch (notification)
        {

            default:
                throw new ArgumentException($"No handlers for {notification.GetType().Name}");
        }
    }

    private Task<Tests.BasicPipelineAdapted.Result<Tests.BasicPipelineAdapted.VersionedResponse>> Handle_Tests_BasicPipelineAdapted_Ping(
        Tests.BasicPipelineAdapted.Ping request,
        CancellationToken cancellationToken)
    {
        return
            _tests_BasicPipelineAdapted_GenericBehavior__tests_BasicPipelineAdapted_Ping.Handle(request, () =>
            /* Request Handler */ _tests_BasicPipelineAdapted_PingHandler.Handle(request, cancellationToken),
            cancellationToken);
    }

    private Task<Tests.BasicPipelineAdapted.VersionedResponse> Handle_Tests_BasicPipelineAdapted_Pong(
        Tests.BasicPipelineAdapted.Pong request,
        CancellationToken cancellationToken)
    {
        return
            /* Request Handler */ _tests_BasicPipelineAdapted_PongHandler.Handle(request, cancellationToken);
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    [DebuggerStepThrough]
    private T ToResponse<T>(object result)
    {
        return (T) result;
    }
}