//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by SwitchMediator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Threading;
using System.Threading.Tasks;

namespace Mediator.Switch;

#pragma warning disable CS1998

public class SwitchMediator : IMediator
{
    #region Fields

    private readonly Tests.ConstrainedPipeline.SpecialProcessRequestHandler _tests_ConstrainedPipeline_SpecialProcessRequestHandler;
    private readonly Tests.ConstrainedPipeline.NormalRequestHandler _tests_ConstrainedPipeline_NormalRequestHandler;
    private readonly Tests.ConstrainedPipeline.GenericLoggingBehavior<Tests.ConstrainedPipeline.SpecialProcessRequest, System.Guid> _tests_ConstrainedPipeline_GenericLoggingBehavior__tests_ConstrainedPipeline_SpecialProcessRequest;
    private readonly Tests.ConstrainedPipeline.SpecialProcessingBehavior<Tests.ConstrainedPipeline.SpecialProcessRequest, System.Guid> _tests_ConstrainedPipeline_SpecialProcessingBehavior__tests_ConstrainedPipeline_SpecialProcessRequest;
    private readonly Tests.ConstrainedPipeline.GenericLoggingBehavior<Tests.ConstrainedPipeline.NormalRequest, int> _tests_ConstrainedPipeline_GenericLoggingBehavior__tests_ConstrainedPipeline_NormalRequest;

    #endregion

    #region Constructor

    public SwitchMediator(
        Tests.ConstrainedPipeline.SpecialProcessRequestHandler tests_ConstrainedPipeline_SpecialProcessRequestHandler,
        Tests.ConstrainedPipeline.NormalRequestHandler tests_ConstrainedPipeline_NormalRequestHandler,
        Tests.ConstrainedPipeline.GenericLoggingBehavior<Tests.ConstrainedPipeline.SpecialProcessRequest, System.Guid> tests_ConstrainedPipeline_GenericLoggingBehavior__tests_ConstrainedPipeline_SpecialProcessRequest,
        Tests.ConstrainedPipeline.SpecialProcessingBehavior<Tests.ConstrainedPipeline.SpecialProcessRequest, System.Guid> tests_ConstrainedPipeline_SpecialProcessingBehavior__tests_ConstrainedPipeline_SpecialProcessRequest,
        Tests.ConstrainedPipeline.GenericLoggingBehavior<Tests.ConstrainedPipeline.NormalRequest, int> tests_ConstrainedPipeline_GenericLoggingBehavior__tests_ConstrainedPipeline_NormalRequest)
    {
        _tests_ConstrainedPipeline_SpecialProcessRequestHandler = tests_ConstrainedPipeline_SpecialProcessRequestHandler;
        _tests_ConstrainedPipeline_NormalRequestHandler = tests_ConstrainedPipeline_NormalRequestHandler;
        _tests_ConstrainedPipeline_GenericLoggingBehavior__tests_ConstrainedPipeline_SpecialProcessRequest = tests_ConstrainedPipeline_GenericLoggingBehavior__tests_ConstrainedPipeline_SpecialProcessRequest;
        _tests_ConstrainedPipeline_SpecialProcessingBehavior__tests_ConstrainedPipeline_SpecialProcessRequest = tests_ConstrainedPipeline_SpecialProcessingBehavior__tests_ConstrainedPipeline_SpecialProcessRequest;
        _tests_ConstrainedPipeline_GenericLoggingBehavior__tests_ConstrainedPipeline_NormalRequest = tests_ConstrainedPipeline_GenericLoggingBehavior__tests_ConstrainedPipeline_NormalRequest;
    }

    #endregion

    public Task<TResponse> Send<TResponse>(IRequest<TResponse> request, CancellationToken cancellationToken = default)
    {
        if (SendSwitchCase.Cases.TryGetValue(request.GetType(), out var handle))
        {
            return (Task<TResponse>)handle(this, request, cancellationToken);
        }

        throw new ArgumentException($"No handler for {request.GetType().Name}");
    }

    private static class SendSwitchCase
    {
        public static readonly Dictionary<Type, Func<SwitchMediator, object, CancellationToken, object>> Cases = new Dictionary<Type, Func<SwitchMediator, object, CancellationToken, object>>
        {
            { // case Tests.ConstrainedPipeline.NormalRequest:
                typeof(Tests.ConstrainedPipeline.NormalRequest), (instance, request, cancellationToken) =>
                    instance.Handle_Tests_ConstrainedPipeline_NormalRequest(
                        (Tests.ConstrainedPipeline.NormalRequest) request, cancellationToken)
            },
            { // case Tests.ConstrainedPipeline.SpecialProcessRequest:
                typeof(Tests.ConstrainedPipeline.SpecialProcessRequest), (instance, request, cancellationToken) =>
                    instance.Handle_Tests_ConstrainedPipeline_SpecialProcessRequest(
                        (Tests.ConstrainedPipeline.SpecialProcessRequest) request, cancellationToken)
            }
        };
    }

    public Task Publish(INotification notification, CancellationToken cancellationToken = default)
    {
        if (PublishSwitchCase.Cases.TryGetValue(notification.GetType(), out var handle))
        {
            return handle(this, notification, cancellationToken);
        }

        throw new ArgumentException($"No handler for {notification.GetType().Name}");
    }

    private static class PublishSwitchCase
    {
        public static readonly Dictionary<Type, Func<SwitchMediator, INotification, CancellationToken, Task>> Cases = new Dictionary<Type, Func<SwitchMediator, INotification, CancellationToken, Task>>
        {

        };
    }

    private Task<System.Guid> Handle_Tests_ConstrainedPipeline_SpecialProcessRequest(
        Tests.ConstrainedPipeline.SpecialProcessRequest request,
        CancellationToken cancellationToken)
    {
        return
            _tests_ConstrainedPipeline_SpecialProcessingBehavior__tests_ConstrainedPipeline_SpecialProcessRequest.Handle(request, () =>
            _tests_ConstrainedPipeline_GenericLoggingBehavior__tests_ConstrainedPipeline_SpecialProcessRequest.Handle(request, () =>
            /* Request Handler */ _tests_ConstrainedPipeline_SpecialProcessRequestHandler.Handle(request, cancellationToken),
            cancellationToken),
            cancellationToken);
    }

    private Task<int> Handle_Tests_ConstrainedPipeline_NormalRequest(
        Tests.ConstrainedPipeline.NormalRequest request,
        CancellationToken cancellationToken)
    {
        return
            _tests_ConstrainedPipeline_GenericLoggingBehavior__tests_ConstrainedPipeline_NormalRequest.Handle(request, () =>
            /* Request Handler */ _tests_ConstrainedPipeline_NormalRequestHandler.Handle(request, cancellationToken),
            cancellationToken);
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    [DebuggerStepThrough]
    private T ToResponse<T>(object result)
    {
        return (T) result;
    }
}